{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI Tags","text":"<p>Adds s-expression HTML tags to FastAPI views. Inspired by FastHTML's use of fastcore's FT components.</p> <p> </p>"},{"location":"#installation","title":"Installation:","text":"<p>uv:</p> <pre><code>uv add fastapi-tags\n</code></pre> <p>pip:</p> <pre><code>pip install fastapi-tags\nuv pip install fastapi-tags\n</code></pre>"},{"location":"#usage","title":"Usage:","text":"<pre><code>from fastapi import FastAPI\nimport fastapi_tags as tg\n\napp = FastAPI()\n\n@app.get(\"/\", response_class=tg.TagResponse)\nasync def index():\n    return tg.Html(tg.H1(\"Hello, world!\", style=\"color: blue;\"))\n</code></pre> <p>If you want to do snippets, just skip the <code>tg.Html</code> tag:</p> <pre><code>@app.get(\"/time\", response_class=tg.TagResponse)\nasync def time():\n    return tg.P(\"Time to do code!\")\n</code></pre>"},{"location":"#with-htmx","title":"With HTMX","text":"<p>If you want to detect HTMX use dependency injection:</p> <pre><code>from fastapi import Depends\n\n@app.get(\"/hello\", response_class=tg.TagResponse)\ndef test_endpoint(is_htmx: bool = Depends(tg.is_htmx_request)):\n    if is_htmx:\n        return tg.H1(\"Hello, hx-request! Here's a partial of the page.\")\n    else:\n        return tg.Html(tg.H1(\"Hello normal request, Here's the full page!\"))\n</code></pre>"},{"location":"#custom-tags","title":"Custom Tags","text":"<p>There are several ways to create custom Tags</p>"},{"location":"#subclassing","title":"Subclassing","text":"<pre><code>class AwesomeP(tg.P) -&gt; tg.Tag:\n    def render(self) -&gt; str:\n        return f\"&lt;p{self.attrs}&gt;AWESOME {self.children}!&lt;/p&gt;\"\nAwesomeP('library')\n</code></pre> <pre><code>&lt;p&gt;AWESOME library!&lt;/p&gt;\n</code></pre>"},{"location":"#custom-tags-built-as-functions","title":"Custom tags built as functions","text":"<pre><code>def PicoCard(header: str, body: str, footer: str) -&gt; tg.Tag:\n    return tg.Article(\n        tg.Header(header),\n        body,\n        tg.Footer(footer)\n    )\n</code></pre> <pre><code>@app.get(\"/card\", response_class=tg.TagResponse)\nasync def card():\n    return PicoCard(\n        'FastAPI Tags',\n        'Adds s-expression HTML tags (Tags) to FastAPI views.',\n        'by various contributors'\n    )\n</code></pre> <pre><code>&lt;article&gt;\n    &lt;header&gt;FastAPI Tags&lt;/header&gt;\n    Adds s-expression HTML tags (Tags) to FastAPI views.\n    &lt;footer&gt;by various contributors&lt;/footer&gt;\n&lt;/article&gt;\n</code></pre>"},{"location":"#raw-html-content","title":"Raw HTML Content","text":"<p>For cases where you need to render raw HTML:</p> <pre><code>from fastapi_tags import RawHTML\n\n# Render raw HTML content\nraw_content = RawHTML('&lt;strong&gt;Bold text&lt;/strong&gt; and &lt;em&gt;italic&lt;/em&gt;')\n\n# Note: RawHTML only accepts a single string argument\n# For multiple elements, combine them first:\nhtml_string = '&lt;p&gt;First&lt;/p&gt;&lt;p&gt;Second&lt;/p&gt;'\nraw = RawHTML(html_string)\n</code></pre>"}]}